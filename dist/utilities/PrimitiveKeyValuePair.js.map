{"version":3,"sources":["../../src/utilities/PrimitiveKeyValuePair.js"],"names":["PrimitiveKeyValuePair","KeyValuePair","constructor","key","value","validateValue","_value","newValue","allowedTypes","includes","TypeError"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,qBAAN,SAAoCC,qBAApC,CAAiD;AAC9DC,EAAAA,WAAW,CAACC,GAAD,EAAMC,KAAN,EAAa;AACtB,UAAMD,GAAN,EAAWC,KAAX;AACAC,IAAAA,aAAa,CAACD,KAAD,CAAb;AACD;;AAED,MAAIA,KAAJ,GAAY;AAAE,WAAO,KAAKE,MAAZ;AAAqB;;AACnC,MAAIF,KAAJ,CAAUG,QAAV,EAAoB;AAClBF,IAAAA,aAAa,CAACE,QAAD,CAAb;AACA,SAAKD,MAAL,GAAcC,QAAd;AACD;;AAV6D;;;AAahE,MAAMC,YAAY,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAArB;;AAEA,MAAMH,aAAa,GAAGD,KAAK,IAAI;AAC7B,MAAI,CAACI,YAAY,CAACC,QAAb,CAAsB,OAAOL,KAA7B,CAAL,EAA0C;AACxC,UAAM,IAAIM,SAAJ,CAAc,mDAAd,CAAN;AACD;AACF,CAJD","sourcesContent":["import KeyValuePair from \"./KeyValuePair\";\n\nexport default class PrimitiveKeyValuePair extends KeyValuePair {\n  constructor(key, value) {\n    super(key, value);\n    validateValue(value);\n  }\n\n  get value() { return this._value; }\n  set value(newValue) {\n    validateValue(newValue);\n    this._value = newValue;\n  }\n}\n\nconst allowedTypes = ['string', 'number', 'boolean'];\n\nconst validateValue = value => {\n  if (!allowedTypes.includes(typeof value)) {\n    throw new TypeError('Values must be of type string, number, or boolean');\n  }\n};\n"],"file":"PrimitiveKeyValuePair.js"}